package ua.company.training.kukuruza.dao.daoMySql;

import ua.company.training.kukuruza.dbConnection.IConnectionFactory;
import ua.company.training.kukuruza.dao.IDaoEducationOption;
import ua.company.training.kukuruza.dao.mapper.EducationOptionMapper;
import ua.company.training.kukuruza.entity.EducationOption;

import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

public class MySqlDaoEducationOption implements IDaoEducationOption {
    private static final String GET_EDUCATION_OPTION_BY_ID_SQL = "SELECT * FROM education_option WHERE id = ?";
    private static final String GET_EDUCATION_OPTION_BY_UNIVERSITY_ID_SQL =
            "SELECT * FROM education_option WHERE university_id = ?";
    private static final String GET_EDUCATION_OPTION_BY_UNIVERSITY_ID_AND_SPECIALTY_ID_SQL =
            "SELECT * FROM education_option WHERE university_id = ? AND specialty_id = ?";
    private static final String GET_ALL_EDUCATION_OPTIONS_SQL = "SELECT * FROM education_option";
    private static final String INSERT_EDUCATION_OPTION_SQL = "INSERT INTO education_option VALUES (NULL, ?, ?, ?)";
    private static final String UPDATE_EDUCATION_OPTION_SQL = "UPDATE education_option SET " +
            "university_id = ?, specialty_id = ?, student_limit = ? WHERE id = ?";
    private static final String DELETE_EDUCATION_OPTION_SQL = "DELETE FROM education_option WHERE id = ?";
    private MySqlDaoHelper helper = MySqlDaoHelper.getInstance();
    private IConnectionFactory factory;

    public MySqlDaoEducationOption(IConnectionFactory factory) {
        this.factory = factory;
    }

    @Override
    public Optional<EducationOption> find(Long id) {
        return helper.get(GET_EDUCATION_OPTION_BY_ID_SQL, EducationOptionMapper::map, id);
    }

    @Override
    public List<EducationOption> findAll() {
        return helper.getList(GET_ALL_EDUCATION_OPTIONS_SQL, EducationOptionMapper::map);
    }

    @Override
    public Optional<EducationOption> findByUniversityIdAndSpecialtyId(Integer universityId, Integer specialtyId) {
        return helper.get(GET_EDUCATION_OPTION_BY_UNIVERSITY_ID_AND_SPECIALTY_ID_SQL, EducationOptionMapper::map,
                universityId, specialtyId);
    }

    @Override
    public Set<Integer> findSpecialtiesIdByUniversityId(Integer universityId) {
        List<EducationOption> educationOptions = helper.getList(GET_EDUCATION_OPTION_BY_UNIVERSITY_ID_SQL,
                EducationOptionMapper::map, universityId);
        return educationOptions.stream()
                .map(EducationOption::getSpecialtyId)
                .collect(Collectors.toSet());
    }

    @Override
    public Long save(EducationOption entity) {
        Long autoGeneratedId = helper.save(INSERT_EDUCATION_OPTION_SQL, Long.class,
                entity.getUniversityId(), entity.getSpecialtyId(), entity.getStudentLimit());
        entity.setId(autoGeneratedId);
        return autoGeneratedId;
    }

    @Override
    public void update(EducationOption entity) {
        helper.update(UPDATE_EDUCATION_OPTION_SQL, entity.getUniversityId(), entity.getSpecialtyId(),
                entity.getStudentLimit(), entity.getId());
    }

    @Override
    public boolean delete(Long id) {
        return helper.delete(DELETE_EDUCATION_OPTION_SQL, id);
    }
}
