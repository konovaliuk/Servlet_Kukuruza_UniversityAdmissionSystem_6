package ua.company.training.kukuruza.dao.daoMySql;

import ua.company.training.kukuruza.dbConnection.IConnectionFactory;
import ua.company.training.kukuruza.dao.IDaoUniversity;
import ua.company.training.kukuruza.dao.mapper.UniversityMapper;
import ua.company.training.kukuruza.entity.University;

import java.util.List;
import java.util.Optional;

public class MySqlDaoUniversity implements IDaoUniversity {
    private static final String GET_ROWS_COUNT_SQL = "SELECT COUNT(id) FROM university";
    private static final String GET_UNIVERSITY_BY_ID_SQL = "SELECT * FROM university WHERE id = ?";
    private static final String GET_ALL_UNIVERSITIES_SQL = "SELECT * FROM university";
    private static final String GET_UNIVERSITIES_WITH_LIMIT_SQL = "SELECT * FROM university LIMIT ?, ?";
    private static final String INSERT_UNIVERSITY_SQL = "INSERT INTO university VALUES (NULL, ?)";
    private static final String UPDATE_UNIVERSITY_SQL = "UPDATE university SET name = ? WHERE id = ?";
    private static final String DELETE_UNIVERSITY_SQL = "DELETE FROM university WHERE id = ?";
    private MySqlDaoHelper helper = MySqlDaoHelper.getInstance();
    private IConnectionFactory factory;

    public MySqlDaoUniversity(IConnectionFactory factory) {
        this.factory = factory;
    }

    @Override
    public Optional<University> find(Integer id) {
        return helper.get(GET_UNIVERSITY_BY_ID_SQL, UniversityMapper::map, id);
    }

    @Override
    public List<University> findAll() {
        return helper.getList(GET_ALL_UNIVERSITIES_SQL, UniversityMapper::map);
    }

    @Override
    public List<University> findAll(Integer skip, Integer limit) {
        return helper.getList(GET_UNIVERSITIES_WITH_LIMIT_SQL, UniversityMapper::map, skip, limit);
    }

    @Override
    public Long getRowsCount() {
        return helper.getRowsCount(GET_ROWS_COUNT_SQL);
    }

    @Override
    public Integer save(University entity) {
        Integer autoGeneratedId = helper.save(INSERT_UNIVERSITY_SQL, entity.getName());
        entity.setId(autoGeneratedId);
        return autoGeneratedId;
    }

    @Override
    public void update(University entity) {
        helper.update(UPDATE_UNIVERSITY_SQL, entity.getName(), entity.getId());
    }

    @Override
    public boolean delete(Integer id) {
        return helper.delete(DELETE_UNIVERSITY_SQL, id);
    }
}
