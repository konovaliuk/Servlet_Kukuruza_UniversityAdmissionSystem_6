package ua.company.training.kukuruza.model.dao.daoMySql;

import ua.company.training.kukuruza.model.connection.IConnectionFactory;
import ua.company.training.kukuruza.model.dao.IDaoExam;
import ua.company.training.kukuruza.model.dao.mapper.ExamMapper;
import ua.company.training.kukuruza.model.entity.Exam;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Set;

public class MySqlDaoExam implements IDaoExam {
    private static final String GET_EXAM_BY_ID_SQL = "SELECT * FROM exam WHERE id = ?";
    private static final String GET_ALL_EXAMS_SQL = "SELECT * FROM exam";
    private static final String INSERT_EXAM_SQL = "INSERT INTO exam VALUES (NULL, ?, ?, ?)";
    private static final String UPDATE_EXAM_SQL = "UPDATE exam SET " +
            "date = ?, address = ?, subject_id = ? WHERE id = ?";
    private static final String DELETE_EXAM_SQL = "DELETE FROM exam WHERE id = ?";
    private MySqlDaoHelper helper = MySqlDaoHelper.getInstance();
    private IConnectionFactory factory;

    public MySqlDaoExam(IConnectionFactory factory) {
        this.factory = factory;
    }

    @Override
    public Optional<Exam> find(Integer id) {
        return helper.get(GET_EXAM_BY_ID_SQL, ExamMapper::map, id);
    }

    @Override
    public List<Exam> findAll() {
        return helper.getList(GET_ALL_EXAMS_SQL, ExamMapper::map);
    }

    @Override
    public List<Exam> findByIdSet(Set<Integer> examsId) {
        if (examsId.isEmpty())
            return Collections.emptyList();
        String sql = helper.buildSql(new StringBuilder("SELECT * FROM exam WHERE id IN("), examsId);
        return helper.getList(sql, ExamMapper::map);
    }

    @Override
    public List<Exam> findNotInIdSet(Set<Integer> examsId) {
        if (examsId.isEmpty())
            return findAll();
        String sql = helper.buildSql(new StringBuilder("SELECT * FROM exam WHERE id NOT IN("), examsId);
        return helper.getList(sql, ExamMapper::map);
    }

    @Override
    public Integer save(Exam entity) {
        Integer autoGeneratedId = helper.save(INSERT_EXAM_SQL,
                entity.getDate(), entity.getAddress(), entity.getSubjectId());
        entity.setId(autoGeneratedId);
        return autoGeneratedId;
    }

    @Override
    public void update(Exam entity) {
        helper.update(UPDATE_EXAM_SQL, entity.getDate(), entity.getAddress(), entity.getSubjectId(), entity.getId());
    }

    @Override
    public boolean delete(Integer id) {
        return helper.delete(DELETE_EXAM_SQL, id);
    }
}
