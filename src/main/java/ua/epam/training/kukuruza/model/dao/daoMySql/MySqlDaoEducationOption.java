package ua.epam.training.kukuruza.model.dao.daoMySql;

import ua.epam.training.kukuruza.model.connection.IConnectionFactory;
import ua.epam.training.kukuruza.model.dao.IDaoEducationOption;
import ua.epam.training.kukuruza.model.dao.mapper.EducationOptionMapper;
import ua.epam.training.kukuruza.model.entity.EducationOption;

import java.util.List;
import java.util.Optional;

public class MySqlDaoEducationOption implements IDaoEducationOption {
    private static final String GET_EDUCATION_OPTION_BY_ID_SQL = "SELECT * FROM education_option WHERE id = ?";
    private static final String GET_ALL_EDUCATION_OPTIONS_SQL = "SELECT * FROM education_option";
    private static final String INSERT_EDUCATION_OPTION_SQL = "INSERT INTO education_option VALUES (NULL, ?, ?, ?)";
    private static final String UPDATE_EDUCATION_OPTION_SQL = "UPDATE education_option SET " +
            "university_id = ?, specialty_id = ?, student_limit = ? WHERE id = ?";
    private static final String DELETE_EDUCATION_OPTION_SQL = "DELETE FROM education_option WHERE id = ?";
    private MySqlDaoHelper helper = MySqlDaoHelper.getInstance();
    private IConnectionFactory factory;

    public MySqlDaoEducationOption(IConnectionFactory factory) {
        this.factory = factory;
    }

    @Override
    public Optional<EducationOption> get(Long id) {
        return helper.get(GET_EDUCATION_OPTION_BY_ID_SQL, EducationOptionMapper::map, id);
    }

    @Override
    public List<EducationOption> getAll() {
        return helper.executeSelectQuery(GET_ALL_EDUCATION_OPTIONS_SQL, EducationOptionMapper::map);
    }

    @Override
    public Long save(EducationOption entity) {
        Long autoGeneratedId = helper.save(INSERT_EDUCATION_OPTION_SQL, Long.class,
                entity.getUniversityId(), entity.getSpecialtyId(), entity.getStudentLimit());
        entity.setId(autoGeneratedId);
        return autoGeneratedId;
    }

    @Override
    public void update(EducationOption entity) {
        helper.update(UPDATE_EDUCATION_OPTION_SQL, entity.getUniversityId(), entity.getSpecialtyId(),
                entity.getStudentLimit(), entity.getId());
    }

    @Override
    public boolean delete(Long id) {
        return helper.delete(DELETE_EDUCATION_OPTION_SQL, id);
    }
}
