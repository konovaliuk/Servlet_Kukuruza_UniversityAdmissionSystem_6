package ua.epam.training.kukuruza.model.dao.daoMySql;

import ua.epam.training.kukuruza.model.connection.IConnectionFactory;
import ua.epam.training.kukuruza.model.dao.IDaoUser;
import ua.epam.training.kukuruza.model.dao.mapper.UserMapper;
import ua.epam.training.kukuruza.model.entity.User;

import java.util.List;
import java.util.Optional;

public class MySqlDaoUser implements IDaoUser {
    private static final String GET_USER_BY_ID_SQL = "SELECT * FROM user WHERE id = ?";
    private static final String GET_ALL_USERS_SQL = "SELECT * FROM user";
    private static final String INSERT_USER_SQL = "INSERT INTO user VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    private static final String UPDATE_USER_SQL = "UPDATE user SET " +
            "login = ?, password = ?, first_name = ?, second_name = ?, gender = ?, " +
            "email = ?, phone = ?, passport_code = ?, user_type_id = ?, user_status_id = ? " +
            "WHERE id = ?";
    private static final String DELETE_USER_SQL = "DELETE FROM user WHERE id = ?";
    private MySqlDaoHelper helper = MySqlDaoHelper.getInstance();
    private IConnectionFactory factory;

    public MySqlDaoUser(IConnectionFactory factory) {
        this.factory = factory;
    }

    @Override
    public Optional<User> get(Long id) {
        return helper.get(GET_USER_BY_ID_SQL, UserMapper::map, id);
    }

    @Override
    public List<User> getAll() {
        return helper.getAll(GET_ALL_USERS_SQL, UserMapper::map);
    }

    @Override
    public Long save(User entity) {
        Long autoGeneratedId = helper.save(INSERT_USER_SQL, Long.class,
                entity.getLogin(),
                entity.getPassword(),
                entity.getFirstName(),
                entity.getSecondName(),
                entity.getGender(),
                entity.getEmail(),
                entity.getPhone(),
                entity.getPassportCode(),
                entity.getUserTypeId(),
                entity.getUserStatusId());
        entity.setId(autoGeneratedId);
        return autoGeneratedId;
    }

    @Override
    public void update(User entity) {
        helper.update(UPDATE_USER_SQL,
                entity.getLogin(),
                entity.getPassword(),
                entity.getFirstName(),
                entity.getSecondName(),
                entity.getGender(),
                entity.getEmail(),
                entity.getPhone(),
                entity.getPassportCode(),
                entity.getUserTypeId(),
                entity.getUserStatusId(),
                entity.getId());
    }

    @Override
    public boolean delete(Long id) {
        return helper.delete(DELETE_USER_SQL, id);
    }

}
